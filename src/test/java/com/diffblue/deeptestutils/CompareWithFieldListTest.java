package com.diffblue.deeptestutils;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.deeptestutils.CompareWithFieldList;
import com.diffblue.deeptestutils.Reflector;

public class CompareWithFieldListTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: CompareWithFieldList */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_CompareWithFieldList__init__000_ed1909cc6b5d2cf3() throws Throwable {

    Object instance;
    {
      /* Arrange */

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.diffblue.deeptestutils.CompareWithFieldList");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 70 branch to line 77
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_CompareWithFieldList_getField_000_f3c17c7de44681a9() throws Throwable {

    java.lang.reflect.Field retval;
    {
      /* Arrange */
      Class cls = null;
      String name = null;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.deeptestutils.CompareWithFieldList");
      Method m = c.getDeclaredMethod("getField", Reflector.forName("java.lang.Class"), Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (java.lang.reflect.Field) m.invoke(null, cls, name);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
