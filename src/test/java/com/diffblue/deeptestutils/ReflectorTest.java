package com.diffblue.deeptestutils;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.deeptestutils.CompareWithFieldList;
import com.diffblue.deeptestutils.Reflector;

public class ReflectorTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Reflector */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_Reflector__clinit__000_ae5274ee25196e59() throws Throwable {

    Object constructed;
    {
      /* Arrange */

      /* Act */
      /* Using constructor to test static initializer */
      constructed = Reflector.getInstance("com.diffblue.deeptestutils.Reflector");
      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_Reflector__init__000_582b90c48ef691e0() throws Throwable {

    Object instance;
    {
      /* Arrange */

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.diffblue.deeptestutils.Reflector");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 135 branch to line 136
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_Reflector_getInstanceField_000_752692ce8ca6878b() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Class c = null;
      Object o = null;
      String fieldName = null;

      /* Act */
      thrown.expect(NoSuchFieldException.class);
      retval = com.diffblue.deeptestutils.Reflector.getInstanceField(c, o, fieldName);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 280 branch to line 281
   * conditional line 281 branch to line 281
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_Reflector_removePackageFromName_000_ef849e4b96681b34() throws Throwable {

    String retval;
    {
      /* Arrange */
      String className = ".??????";

      /* Act */
      retval = com.diffblue.deeptestutils.Reflector.removePackageFromName(className);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals("??????", retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 280 branch to line 283
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_Reflector_removePackageFromName_001_f846510f4a8dcb91() throws Throwable {

    String retval;
    {
      /* Arrange */
      String className = "??????";

      /* Act */
      retval = com.diffblue.deeptestutils.Reflector.removePackageFromName(className);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals("??????", retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 86 branch to line 87
   */

  @org.junit.Test
  public void com_diffblue_deeptestutils_Reflector_setField_000_8d6cf6a812164a87() throws Throwable {

    {
      /* Arrange */
      Class c = null;
      Object o = null;
      String fieldName = null;
      Object newVal = null;

      /* Act */
      thrown.expect(NoSuchFieldException.class);
      try {
        Class<?> c0 = Reflector.forName("com.diffblue.deeptestutils.Reflector");
        Method m = c0.getDeclaredMethod("setField", Reflector.forName("java.lang.Class"), Reflector.forName("java.lang.Object"), Reflector.forName("java.lang.String"), Reflector.forName("java.lang.Object"));
        m.setAccessible(true);
        m.invoke(null, c, o, fieldName, newVal);
      } catch(InvocationTargetException ex) {
        throw ex.getCause();
      }

      /* Method return type is void, or not expected to return */
    }
  }
}
